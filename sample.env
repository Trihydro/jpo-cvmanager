# Environment variable file for the JPO CV Manager API deployment through docker-compose
DOCKER_HOST_IP=
# Note if debugging, this webapp host IP should be set to the IP of the host machine running the webapp (localhost)
WEBAPP_HOST_IP=${DOCKER_HOST_IP}
# Note if using WEBAPP_DOMAIN for the docker-compose-webapp-deployment.yml file you will need to include http:// or https://
WEBAPP_DOMAIN=cvmanager.local.com
KC_HOST_IP=${DOCKER_HOST_IP}

# Firmware Manager connectivity in the format 'http://endpoint:port'
FIRMWARE_MANAGER_ENDPOINT=http://${DOCKER_HOST_IP}:8089

# Allowed CORS domain for accessing the CV Manager API from (set to the web application hostname)
# Make sure to include http:// or https://
# If using docker then this value should be set to: http://${WEBAPP_HOST_IP}:3000
# If running the webapp using npm then set it to: http://localhost:3000
# Leave as * to allow all domains access
CORS_DOMAIN = *

# PostgreSQL Database connection information
# this value may need to folow with the webapp host if debugging the applications
PG_DB_HOST=${DOCKER_HOST_IP}:5432
PG_DB_NAME=postgres
PG_DB_USER=postgres
# If the PG_DB_PASS variable has special characters, make sure to wrap it in single quotes
PG_DB_PASS=

# If connecting to PGDB over websocket:
INSTANCE_CONNECTION_NAME=

# Keycloak authentication crendentials
KEYCLOAK_ADMIN=admin
KEYCLOAK_ADMIN_PASSWORD=

# Keycloak Parameters - to generate secret key use a password generator such as: https://www.avast.com/en-us/random-password-generator#pc and set the length to 32
KEYCLOAK_REALM=cvmanager
KEYCLOAK_API_CLIENT_ID=cvmanager-api
KEYCLOAK_API_CLIENT_SECRET_KEY=
KEYCLOAK_LOGIN_THEME_NAME=sample_theme
# Note if using KEYCLOAK_DOMAIN for the docker-compose-webapp-deployment.yml file you will need to include http:// or https://
KEYCLOAK_DOMAIN=cvmanager.auth.com

# GCP OAuth2.0 client ID for SSO authentication in keycloak - if not specified the google SSO will not be functional
GOOGLE_CLIENT_ID=
GOOGLE_CLIENT_SECRET=

# Set to either "BIGQUERY" or "MONGODB" depending on message count location.
COUNTS_DB_TYPE="BIGQUERY"

# If "BIGQUERY", set the location of the GCP service account key attached as a volume
GOOGLE_APPLICATION_CREDENTIALS='./resources/google/sample_gcp_service_account.json'

# If "MONGODB", set the MongoDB variables
MONGO_DB_URI=
MONGO_DB_NAME="ODE"

# Set these variables if using either "MONGODB" or "BIGQUERY"
# COUNTS_DB_NAME: Used for V2X message counts
# COUNTS_MSG_TYPES: Comma seperated list of message types.
COUNTS_DB_NAME=
# COUNTS_MSG_TYPES must be set for the counts menu to correctly populate when building an image for deployment
COUNTS_MSG_TYPES='BSM,SSM,SPAT,SRM,MAP'
BSM_DB_NAME=
SSM_DB_NAME=
SRM_DB_NAME=

# WZDx API key and endpoint for pulling WZDx data into the CV Manager
WZDX_API_KEY=
WZDX_ENDPOINT=

# Contact Support Menu Email Configuration
CSM_EMAIL_TO_SEND_FROM=
CSM_EMAIL_APP_USERNAME=
CSM_EMAIL_APP_PASSWORD=
CSM_EMAILS_TO_SEND_TO=
CSM_TARGET_SMTP_SERVER_ADDRESS=
CSM_TARGET_SMTP_SERVER_PORT=

# Python timezone for the CV Manager (You can list pytz timezones with the command 'pytz.all_timezones')
TIMEZONE="US/Mountain"

# Mapbox token for map rendering in the webapp
MAPBOX_TOKEN=
# DOT_NAME must be set for the DOT name to correctly populate when building an image for deployment
DOT_NAME="CDOT"
MAPBOX_INIT_LATITUDE="39.7392"
MAPBOX_INIT_LONGITUDE="-104.9903"
MAPBOX_INIT_ZOOM="10"

# Firmware Manager
## Provider of storage for firmware files (currently supported: GCP, DOCKER)
BLOB_STORAGE_PROVIDER=DOCKER
## GCP Project and Bucket for BLOB storage (if using GCP)
GCP_PROJECT=
BLOB_STORAGE_BUCKET=
## Docker volume mount point for BLOB storage (if using Docker)
HOST_BLOB_STORAGE_DIRECTORY=./local_blob_storage

# Levels are "DEBUG", "INFO", "WARNING", and "ERROR"
API_LOGGING_LEVEL="INFO"
# Supported log levels are "ALL", "DEBUG", "ERROR", "FATAL", "INFO", "OFF", "TRACE" and "WARN"
KC_LOGGING_LEVEL="INFO"